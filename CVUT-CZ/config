tracking:
{
  input:
  {
    translationsFile="translations.txt"
  }
  neuralDetector:
  {
    segmentationThreshold:
    {
      dICC2DHHeLa=0.6;
      fluoC2DLMSC=0.5;
      fluoN2DHGOWT1=0.6;
      fluoN2DHSIM=0.6;
      fluoN2DLHeLa=0.4;
      phCC2DHU373=0.5;
      phCC2DLPSC=0.4;
    }
    mustContainCircleRadius:
    {
      dICC2DHHeLa=5;
      fluoC2DLMSC=4;
      fluoN2DHGOWT1=4;
      fluoN2DHSIM=3;
      fluoN2DLHeLa=2;
      phCC2DHU373=6;
      phCC2DLPSC=1;
    }
    mustHaveAtLeastPixels:
    {
      dICC2DHHeLa=500;
      fluoC2DLMSC=300;
      fluoN2DHGOWT1=200;
      fluoN2DHSIM=130;
      fluoN2DLHeLa=50;
      phCC2DHU373=500;
      phCC2DLPSC=15;
    }
    networkFilename:
    {
      dICC2DHHeLa="python/networks/DIC-C2DH-HeLa_20_19_full_loss";
      fluoC2DLMSC="python/networks/Fluo-C2DL-MSC_13_5_loss";
      fluoN2DHGOWT1="python/networks/Fluo-N2DH-GOWT1_13_5_full_loss";
      fluoN2DHSIM="python/networks/Fluo-N2DH-SIM_13_12_full_loss";
      fluoN2DLHeLa="python/networks/Fluo-N2DL-HeLa_7_6_full_loss";
      phCC2DHU373="python/networks/PhC-C2DH-U373_15_14_2_loss";
      phCC2DLPSC="python/networks/PhC-C2DL-PSC_7_1_full_loss";
    }
    boundaryThreshold:
    {
      dICC2DHHeLa=0.0;
      fluoC2DLMSC=0.0;
      fluoN2DHGOWT1=0.0;
      fluoN2DHSIM=0.0;
      fluoN2DLHeLa=0.0;
      phCC2DHU373=0.0;
      phCC2DLPSC=0.0;
    }
    fillHolesLevel://0=do not fill, 1=fill but not at image boundary, 2=fill all, 3=fill bays
    {
      dICC2DHHeLa=1;
      fluoC2DLMSC=1;
      fluoN2DHGOWT1=2;
      fluoN2DHSIM=3;
      fluoN2DLHeLa=2;
      phCC2DHU373=2;
      phCC2DLPSC=2;
    }
    maxRevisitNumber:
    {
      dICC2DHHeLa=7;
      fluoC2DLMSC=1;
      fluoN2DHGOWT1=2;
      fluoN2DHSIM=1;
      fluoN2DLHeLa=5;
      phCC2DHU373=1;
      phCC2DLPSC=5;
    }
    minRevisitSize:
    {
      dICC2DHHeLa=2500;
      fluoC2DLMSC=3000;
      fluoN2DHGOWT1=400;
      fluoN2DHSIM=200;
      fluoN2DLHeLa=60;
      phCC2DHU373=2000;
      phCC2DLPSC=35;
    }
    distOfDistPixelCost:
    {
      dICC2DHHeLa=0.0;
      fluoC2DLMSC=0.0;
      fluoN2DHGOWT1=0.0;
      fluoN2DHSIM=0.0;
      fluoN2DLHeLa=0.0;
      phCC2DHU373=0.0;
      phCC2DLPSC=0.0;
    }
    convexHullRevisit:
    {
      maxCircleRadius:
      {
        dICC2DHHeLa=-1;
        fluoC2DLMSC=-1;
        fluoN2DHGOWT1=15;
        fluoN2DHSIM=-1;
        fluoN2DLHeLa=5;
        phCC2DHU373=-1;
        phCC2DLPSC=-1;
      }
      rayPercentage:
      {
        dICC2DHHeLa=-1;
        fluoC2DLMSC=0.97;
        fluoN2DHGOWT1=0.94;
        fluoN2DHSIM=-1;
        fluoN2DLHeLa=0.73;
        phCC2DHU373=0.93;
        phCC2DLPSC=-1;
      }
      maxRayDistance:
      {
        dICC2DHHeLa=-1;
        fluoC2DLMSC=20;
        fluoN2DHGOWT1=-1;
        fluoN2DHSIM=-1;
        fluoN2DLHeLa=-1;
        phCC2DHU373=20;
        phCC2DLPSC=-1;
      }

    }
    
    
    
    minBrightness:
    {
      dICC2DHHeLa=0.0;
      fluoC2DLMSC=2000.0;
      fluoN2DHGOWT1=0.0;
      fluoN2DHSIM=60.0;
      fluoN2DLHeLa=32768.0;
      phCC2DHU373=20.0;
      phCC2DLPSC=0.0;
    }
    maxBrightness:
    {
      dICC2DHHeLa=255.0;
      fluoC2DLMSC=65535.0;
      fluoN2DHGOWT1=255.0;
      fluoN2DHSIM=1000.0;
      fluoN2DLHeLa=36863.0;
      phCC2DHU373=200.0;
      phCC2DLPSC=255.0;
    }
    desiredHistogramMean:
    {
      dICC2DHHeLa=118.0;
      fluoC2DLMSC=-1;
      fluoN2DHGOWT1=10.0;
      fluoN2DHSIM=-1;
      fluoN2DLHeLa=-1;
      phCC2DHU373=88.0;
      phCC2DLPSC=-1;
    }
  }
  nucleiDetector:
  {    
    segmentationThreshold=0.52;//0.52 is the best for Simulated_nuclei_moving_on_a_flat_surface sequence 5
    blurFilterRadius=5;
    blurFilterSigma=2;
  }
  heLaDetector:
  {    
    threshold0Multiplier=6.0;
    threshold1Multiplier=1.0;
    blurFilterRadius=3;
    blurFilterSigma=1;
    //rerunSimilarity=0.2;
    rerunSimilarity=0.18;
  }
  sampler:
  {
    numofSamples=1;
    //numofSweeps=5;
    numofSweeps:
    {
      dICC2DHHeLa=7;
      fluoC2DLMSC=3;
      fluoN2DHGOWT1=3;
      fluoN2DHSIM=5;
      fluoN2DLHeLa=4;
      phCC2DHU373=3;
      phCC2DLPSC=15;
    }
    
    longestCoGMove: //Relates to distance of centers of gravity
    {
      dICC2DHHeLa=50;
      fluoC2DLMSC=50;
      fluoN2DHGOWT1=50;
      fluoN2DHSIM=50;
      fluoN2DLHeLa=50;
      phCC2DHU373=50;
      phCC2DLPSC=5;
    }
    ignoreLongestMoveIfOverlap:
    {
      dICC2DHHeLa=1;//maybe 0
      fluoC2DLMSC=0;
      fluoN2DHGOWT1=0;
      fluoN2DHSIM=0;
      fluoN2DLHeLa=0;
      phCC2DHU373=0;
      phCC2DLPSC=1;
    }
    closeToImageBoundaryThreshold:
    {
      dICC2DHHeLa=-1;
      fluoC2DLMSC=-1;
      fluoN2DHGOWT1=-1;
      fluoN2DHSIM=-1;
      fluoN2DLHeLa=12.5;
      phCC2DHU373=-1;
      phCC2DLPSC=-1;
    }
    
    model: //see FeaturesLabel::get_feature_index
    {
      dICC2DHHeLa=[0,2,3,1];
      fluoC2DLMSC=[0,2];
      fluoN2DHGOWT1=[0,2];
      fluoN2DHSIM=[0,2,3,4];
      fluoN2DLHeLa=[0,1,2,3];
      phCC2DHU373=[0,2];
      phCC2DLPSC=[0,2,3,4];
    }
    boundaryTouchingBoundaryKill=0.3;
    nonSqueezeMitosis:
    {
      maxSisterCoGDistance:
      {
        dICC2DHHeLa=-1;
        fluoC2DLMSC=-1;
        fluoN2DHGOWT1=-1;
        fluoN2DHSIM=-1;
        fluoN2DLHeLa=50;
        phCC2DHU373=-1;
        phCC2DLPSC=-1;
      }
      maxSisterSizeRatio:
      {
        dICC2DHHeLa=-1;
        fluoC2DLMSC=-1;
        fluoN2DHGOWT1=-1;
        fluoN2DHSIM=-1;
        fluoN2DLHeLa=1.5;
        phCC2DHU373=-1;
        phCC2DLPSC=-1;
      }
      maxParentCoGDistance:
      {
        dICC2DHHeLa=-1;
        fluoC2DLMSC=-1;
        fluoN2DHGOWT1=-1;
        fluoN2DHSIM=-1;
        fluoN2DLHeLa=35;
        phCC2DHU373=-1;
        phCC2DLPSC=-1;
      }
    }
    mergeSmallTrajectory:
    {
      maxSize=140;
      maxDistance=20;
    }
    
    initialSqueezeToFuture:
    {
      dICC2DHHeLa=1;
      fluoC2DLMSC=1;
      fluoN2DHGOWT1=1;
      fluoN2DLHeLa=1;
      fluoN2DHSIM=1;
      phCC2DHU373=1;
      phCC2DLPSC=1;
    }    
    initialSqueezeToPast:
    {
      dICC2DHHeLa=1;
      fluoC2DLMSC=1;
      fluoN2DHGOWT1=0;
      fluoN2DLHeLa=0;
      fluoN2DHSIM=0;
      phCC2DHU373=1;
      phCC2DLPSC=0;
    }    

  }
  bayesRisk:
  {
    temporalDistance=1;
  }
  output:
  {
    saveModel=0;
    saveSamples=0; //This is yes/no variable
    saveSamplesImages=1; //Determines number of samples to be visualized
    saveFinalResult=1;
    saveFinalResultImages=0;
    saveFinalResultISBI=0;
  }
  other:
  {
    //useSerialization=1; //If useSerialization=1, the sampler keeps some data serialized into temporary files in order to save RAM
  }
};
